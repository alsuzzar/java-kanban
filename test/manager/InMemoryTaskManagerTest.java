package manager;

import model.Epic;
import model.Status;
import model.Subtask;
import model.Task;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class InMemoryTaskManagerTest {

    Task task;
    Subtask subtask;
    Epic epic;
    TaskManager testTaskManager;

    @BeforeEach
    void setUp() {
        testTaskManager = new InMemoryTaskManager();
    }

    @AfterEach
    void wrapUp() {
        testTaskManager.deleteAllTasks();
        testTaskManager.deleteAllEpics();
        testTaskManager.deleteAllSubtasks();
    }

    @Test
    void shouldCreateNewTask() {

        task = new Task();
        task.setName("Test");
        task.setDescription("Test Description");
        task.setStatus(Status.NEW);

        final int taskId = testTaskManager.createTask(task).getId();

        final Task savedTask = testTaskManager.getTaskById(taskId);

        assertNotNull(savedTask, "Задача не найдена.");
        assertEquals(task, savedTask, "Задачи не совпадают.");

        final ArrayList<Task> tasks = testTaskManager.getAllTasks();

        assertNotNull(tasks, "Задачи не возвращаются.");
        assertEquals(1, tasks.size(), "Неверное количество задач.");
        assertEquals(task, tasks.get(0), "Задачи не совпадают.");
    }

    @Test
    void shouldCreateNewEpic() {

        epic = new Epic();
        epic.setName("Test");
        epic.setDescription("Test Description");
        epic.setStatus(Status.NEW);

        final int epicId = testTaskManager.createEpic(epic).getId();

        final Epic savedEpic = testTaskManager.getEpicById(epicId);

        assertNotNull(savedEpic, "Эпик не найден.");
        assertEquals(epic, savedEpic, "Эпики не совпадают.");

        final ArrayList<Epic> epics = testTaskManager.getAllEpics();

        assertNotNull(epics, "Эпики не возвращаются.");
        assertEquals(1, epics.size(), "Неверное количество Эпиков.");
        assertEquals(epic, epics.get(0), "Эпики не совпадают.");
    }

    @Test
    void shouldCreateNewSubtask() {
        epic = new Epic();
        epic.setName("Epic");
        epic.setDescription("Epic desc");
        epic.setStatus(Status.NEW);

        int epicId = testTaskManager.createEpic(epic).getId();
        subtask = new Subtask();
        subtask.setName("Test");
        subtask.setDescription("Test Description");
        subtask.setStatus(Status.NEW);
        subtask.setEpicId(epicId);

        final int subtaskId = testTaskManager.createSubtask(subtask).getId();

        final Subtask savedSubtask = testTaskManager.getSubtaskById(subtaskId);

        assertNotNull(savedSubtask, "Подзадача не найдена.");
        assertEquals(subtask, savedSubtask, "Подзадачи не совпадают.");

        final ArrayList<Subtask> subtasks = testTaskManager.getAllSubtasks();

        assertNotNull(subtasks, "Подзадачи не возвращаются.");
        assertEquals(1, subtasks.size(), "Неверное количество Подзадач.");
        assertEquals(subtask, subtasks.get(0), "Подзадачи не совпадают.");
    }

    @Test
    void shouldNotAllowSubtaskToBeItsOwnEpic() {
        epic = new Epic();
        testTaskManager.createEpic(epic);
        int epicId = epic.getId();

        subtask = new Subtask();
        subtask.setEpicId(epicId);

        Subtask result = testTaskManager.createSubtask(subtask);

        assertNotEquals(epicId, result.getId(), "Подзадача не должна иметь тот же id, что и эпик");
    }

    @Test
    void manuallySetId_shouldNotConflictWithAutoGeneratedIds() {

        Task manualTask = new Task();
        manualTask.setName("Manual");
        manualTask.setDescription("Manual task");
        manualTask.setStatus(Status.NEW);
        manualTask.setId(100);
        testTaskManager.createTaskWithManualId(manualTask);

        Task autoTask = new Task();
        autoTask.setName("Auto");
        autoTask.setDescription("Auto task");
        autoTask.setStatus(Status.NEW);
        int autoId = testTaskManager.createTask(autoTask).getId();

        assertNotEquals(manualTask.getId(), autoId, "ID задач не должны совпадать");

        Task fetchedManual = testTaskManager.getTaskById(100);
        Task fetchedAuto = testTaskManager.getTaskById(autoId);

        assertEquals(manualTask, fetchedManual, "Ручная задача не найдена");
        assertEquals(autoTask, fetchedAuto, "Автоматическая задача не найдена");
    }

    @Test
    void historyShouldNotChangeAfterTaskIsUpdated() {
        Task task = new Task();
        task.setName("Original");
        task.setDescription("Desc 1");
        task.setStatus(Status.NEW);
        Task created = testTaskManager.createTask(task);
        int id = created.getId();

        testTaskManager.getTaskById(id);

        Task updatedTask = new Task();
        updatedTask.setId(id);
        updatedTask.setName("Updated");
        updatedTask.setDescription("Desc 2");
        updatedTask.setStatus(Status.IN_PROGRESS);

        testTaskManager.updateTaskById(updatedTask);

        List<Task> historyList = testTaskManager.getHistory();
        Task fromHistory = historyList.get(0);

        assertEquals("Original", fromHistory.getName(), "Имя задачи в истории не должно измениться");
        assertEquals("Desc 1", fromHistory.getDescription(), "Описание должно остаться прежним");
        assertEquals(Status.NEW, fromHistory.getStatus(), "Статус должен быть прежним");
    }

}